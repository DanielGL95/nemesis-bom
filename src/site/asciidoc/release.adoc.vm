= Performing a release
Petar Tahchiev <https://github.com/ptahchiev[@ptahchiev]>;

#set($releaseVersionNum = $number.format($StringUtils.substring($project.version,0,$project.version.indexOf(".BUILD-SNAPSHOT"))))
#set($releaseVersion = "$releaseVersionNum.0.RELEASE")
#set($nextVersionNum = $number.format($math.add($releaseVersionNum, 0.1)))
#set($nextVersion="$nextVersionNum.0.BUILD-SNAPSHOT")
#set($oldVersionNum = $math.sub($releaseVersionNum, 0.1))
#set($oldSnapshotVersion="$number.format($oldVersionNum).BUILD-SNAPSHOT")

To perform a release of the different Nemesis projects follow the steps below.

WARNING: Make sure the CI build is green and you have no snapshot dependencies

== Preparation
Before you begin the release process, please change the `nemesis.version` property like this:
[source,xml]
----
<nemesis.version>$releaseVersion</nemesis.version>
----

then build the bom, commit and push your changes:

[source,bash]
----
mvn clean install
git commit -am "Update nemesis.version before release."
git push origin master
----

so that in the local repository you have the new version.

You might also want to include this in your `settings.xml` so that you don't get asked for your github username/password every time.
[source,xml]
----
<server>
   <id>githhub</id>
   <username>YOUR_USERNAME</username>
   <password>YOUR_PASSWORD</password>
</server>
----

== Release process
The release process contains the following ordered steps:
[source,bash]
----
mvn release:clean release:prepare -Dtag=$releaseVersion -DreleaseVersion=$releaseVersion -DdevelopmentVersion=$nextVersion
mvn release:perform
mvn clean install javadoc:javadoc site site:deploy -Pquick
git checkout tags/$releaseVersion
mvn clean install javadoc:javadoc site site:deploy -Pquick
git checkout master
----

and these steps need to be executed for every of the nemesis projects in order.

== Release the Platform BOM

== Release the tools

== Release the platform project
You will need to resolve the parent bom - resolve it to just released version and set the development version - $releaseVersion)

== Release the archetype
The nemesis archetype is released with the above commands, but after the release you also need to prepare the archetype itself:
[source,bash]
----
git checkout tags/$releaseVersion
----
This will checkout the released tag version.
[source,bash]
----
mvn clean install
----
This will build the tag version.
[source,bash]
----
mvn archetype:create-from-project -Darchetype.properties=src/main/resources/archetype.properties -s src/main/resources/settings.xml
----
This will create archetype from the given project.
[source,bash]
----
find target/generated-sources/archetype/ -type d -regex ".*/db/migration/.*" -exec rm -r {} +
----
This will delete all the schema .sql files from the storefront.
[source,bash]
----
mvn package deploy -f target/generated-sources/archetype/ -s src/main/resources/settings.xml
----
This will build and deploy the archetype with version $releaseVersion to the nemesis-repository so that orther clients can create projects from it.

== Release the consoles

== Revert the nemesis.version property
Revert the nemesis.version property to `$nextVersion`, then commit, push and deploy.

== Make sure the CI build is green again.
Next step is to make sure the link:http://circleci.com/dashboard[CircleCI] build is stable again.

== Close milestones
Go through all the github projects and close the milestone that we have just released. If necessary create new milestones for future releases.

== Draft a new release on github
For every project open the release url and create a new link:https://github.com/nemesis-software/nemesis-bom/releases[Github Release].

== Generate a changelog	
After you have finished releasing every nemesis project go though each project and generate a changelog for what was changed in this version. 
We use the link:https://skywinder.github.io/github-changelog-generator/[github_changelog_generator] tool for generating the changelog.
Simply run the following command in each of the released projects and then push the new changelog:
[source,bash]
----
github_changelog_generator -u your_username -t your_github_token
----
The parameter `your_username` is optional and `your_github_token` can be skipped if you have specified `$CHANGELOG_GITHUB_TOKEN` environment variable.

== Update your IDE
Make sure your IDE has the right `since` attribute. You should bump the version so that every new class that you create will have the correct version on it.
For IntellijIDEA you can do that in  `File` -> `Settings` -> `Editor` -> `File and code templates` and click on the `Includes` tab .

== Update version in start.nemesis.io
You will need to update the versions in the `nemesis-start` project to reflect the newly released version.

== Make new alias on the documentation website
You need to make the alias `current` to point to the latest version that you just released. Also renamed the old `$oldSnapshotVersion` version to be the just `$releaseVersion` as there will be no more deployments in that version.
[source,bash]
----
unlink current
unlink current-snapshot
ln -s $releaseVersion current
ln -s $nextVersion current-snapshot
----
